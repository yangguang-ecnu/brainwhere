
R version 2.13.1 (2011-07-08)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Loading required package: proto
Loading required package: grid
Loading required package: reshape
Loading required package: plyr

Attaching package: 'reshape'

The following object(s) are masked from 'package:plyr':

    rename, round_any

[Previously saved workspace restored]

> #!/usr/bin/Rscript
> # This script contains r commands for creating plots of R01 data:
> # 
> # Notes about analysis and visualization choices:
> # - mean and sd calculated without NAs (i.e., if division by zero results in LI
> #   or LIchange of NA, those sessions aren't counted in n used to calculate mean
> #   and sd)
> # - though range of LI is 1 to -1, showing 2 to -2 on axis to make equivalent
> #   with range of LIchange
> 
> 
> # load required libraries
> library(ggplot2)
> library(plyr)
> library(reshape2)

Attaching package: 'reshape2'

The following object(s) are masked from 'package:reshape':

    colsplit, melt, recast

> 
> # import csv and double-check it:
> data.long<-(read.csv("/tmp/r01_li_long.csv"))
> head(data.long)
  participant     group session                      roi ulLeft ulRight
1    INT2_s01 intention     pre CROSSONlateralFrontalROI    633     339
2    INT2_s01 intention     pre       CROSSONPerisylvian      0     115
3    INT2_s01 intention     pre     CROSSONmedialFrontal      9      11
4    INT2_s01 intention    post CROSSONlateralFrontalROI   8064    4642
5    INT2_s01 intention    post       CROSSONPerisylvian   1016     791
6    INT2_s01 intention    post     CROSSONmedialFrontal   2530    4790
> str(data.long)
'data.frame':	126 obs. of  6 variables:
 $ participant: Factor w/ 14 levels "INT2_s01","INT2_s03",..: 1 1 1 1 1 1 1 1 1 2 ...
 $ group      : Factor w/ 2 levels "control","intention": 2 2 2 2 2 2 2 2 2 2 ...
 $ session    : Factor w/ 3 levels "3mo","post","pre": 3 3 3 2 2 2 1 1 1 3 ...
 $ roi        : Factor w/ 3 levels "CROSSONlateralFrontalROI",..: 1 3 2 1 3 2 1 3 2 1 ...
 $ ulLeft     : int  633 0 9 8064 1016 2530 0 0 0 2349 ...
 $ ulRight    : int  339 115 11 4642 791 4790 0 0 0 949 ...
> summary(data.long)
   participant       group    session                         roi    
 INT2_s01: 9   control  :63   3mo :42   CROSSONlateralFrontalROI:42  
 INT2_s03: 9   intention:63   post:42   CROSSONmedialFrontal    :42  
 INT2_s04: 9                  pre :42   CROSSONPerisylvian      :42  
 INT2_s05: 9                                                         
 INT2_s06: 9                                                         
 INT2_s07: 9                                                         
 (Other) :72                                                         
     ulLeft         ulRight       
 Min.   :    0   Min.   :    0.0  
 1st Qu.:  149   1st Qu.:  241.5  
 Median :  790   Median :  912.0  
 Mean   : 1804   Mean   : 1768.4  
 3rd Qu.: 2305   3rd Qu.: 2490.5  
 Max.   :17901   Max.   :11339.0  
 NA's   :    3   NA's   :    3.0  
> 
> # import csv and double-check it:
> data.cstat<-(read.csv("/tmp/r01-cstat-Z.csv"))
> head(data.cstat)
  participant naming.cstat.Z.post category.cstat.Z.post
1    INT2_s01            0.370500               2.01600
2    INT2_s03            4.576300               3.89350
3    INT2_s05            3.834520               4.24000
4    INT2_s06                  NA               4.24335
5    INT2_s11            4.835779               3.91400
6    INT2_s12            2.874280               2.81200
> str(data.cstat)
'data.frame':	14 obs. of  3 variables:
 $ participant          : Factor w/ 14 levels "INT2_s01","INT2_s03",..: 1 2 4 5 9 10 12 3 6 7 ...
 $ naming.cstat.Z.post  : num  0.37 4.58 3.83 NA 4.84 ...
 $ category.cstat.Z.post: num  2.02 3.89 4.24 4.24 3.91 ...
> summary(data.cstat)
   participant naming.cstat.Z.post category.cstat.Z.post
 INT2_s01:1    Min.   :0.3705      Min.   :-0.700       
 INT2_s03:1    1st Qu.:3.8345      1st Qu.: 2.016       
 INT2_s04:1    Median :4.0840      Median : 3.415       
 INT2_s05:1    Mean   :3.7362      Mean   : 2.845       
 INT2_s06:1    3rd Qu.:4.6252      3rd Qu.: 3.914       
 INT2_s07:1    Max.   :4.8358      Max.   : 4.275       
 (Other) :8    NA's   :1.0000      NA's   : 1.000       
> 
> # calculate LI and spot-check. Results in NaN when dividing by zero
> data.long <- transform(data.long, LI=(ulLeft-ulRight)/(ulLeft+ulRight))
> head(data.long)
  participant     group session                      roi ulLeft ulRight
1    INT2_s01 intention     pre CROSSONlateralFrontalROI    633     339
2    INT2_s01 intention     pre       CROSSONPerisylvian      0     115
3    INT2_s01 intention     pre     CROSSONmedialFrontal      9      11
4    INT2_s01 intention    post CROSSONlateralFrontalROI   8064    4642
5    INT2_s01 intention    post       CROSSONPerisylvian   1016     791
6    INT2_s01 intention    post     CROSSONmedialFrontal   2530    4790
          LI
1  0.3024691
2 -1.0000000
3 -0.1000000
4  0.2693216
5  0.1245158
6 -0.3087432
> summary(data.long)
   participant       group    session                         roi    
 INT2_s01: 9   control  :63   3mo :42   CROSSONlateralFrontalROI:42  
 INT2_s03: 9   intention:63   post:42   CROSSONmedialFrontal    :42  
 INT2_s04: 9                  pre :42   CROSSONPerisylvian      :42  
 INT2_s05: 9                                                         
 INT2_s06: 9                                                         
 INT2_s07: 9                                                         
 (Other) :72                                                         
     ulLeft         ulRight              LI         
 Min.   :    0   Min.   :    0.0   Min.   :-1.0000  
 1st Qu.:  149   1st Qu.:  241.5   1st Qu.:-0.5643  
 Median :  790   Median :  912.0   Median :-0.1067  
 Mean   : 1804   Mean   : 1768.4   Mean   :-0.1096  
 3rd Qu.: 2305   3rd Qu.: 2490.5   3rd Qu.: 0.2778  
 Max.   :17901   Max.   :11339.0   Max.   : 1.0000  
 NA's   :    3   NA's   :    3.0   NA's   : 9.0000  
> # ^^ notice NA's in LI summary !!!!!!!!!!!! change to zeros by convention !!!!!!!!!!!!!!!!
> data.long[sapply(data.long,is.na)] = 0
> summary(data.long)
   participant       group    session                         roi    
 INT2_s01: 9   control  :63   3mo :42   CROSSONlateralFrontalROI:42  
 INT2_s03: 9   intention:63   post:42   CROSSONmedialFrontal    :42  
 INT2_s04: 9                  pre :42   CROSSONPerisylvian      :42  
 INT2_s05: 9                                                         
 INT2_s06: 9                                                         
 INT2_s07: 9                                                         
 (Other) :72                                                         
     ulLeft           ulRight              LI          
 Min.   :    0.0   Min.   :    0.0   Min.   :-1.00000  
 1st Qu.:  128.2   1st Qu.:  183.5   1st Qu.:-0.52085  
 Median :  693.5   Median :  872.0   Median :-0.03694  
 Mean   : 1760.6   Mean   : 1726.3   Mean   :-0.10174  
 3rd Qu.: 2209.2   3rd Qu.: 2449.5   3rd Qu.: 0.25229  
 Max.   :17901.0   Max.   :11339.0   Max.   : 1.00000  
                                                       
> 
> 
> # change factor level "3mo" to "followup" for better naming
> levels(data.long$session)
[1] "3mo"  "post" "pre" 
> levels(data.long$session)[levels(data.long$session)=="3mo"]<-"followup"
> levels(data.long$session)
[1] "followup" "post"     "pre"     
> # and also order session levels:
> data.long$session <- factor(data.long$session, levels=c("pre","post","followup"))
> levels(data.long$session)
[1] "pre"      "post"     "followup"
> # more factor ordering help:
> # reorder()
> # refactor()
> 
> # reorder participants to reflect treatment then controls (new for poster)
> data.long$participant <- factor(data.long$participant, levels=c("INT2_s01","INT2_s03","INT2_s05","INT2_s06","INT2_s11","INT2_s12","INT2_s15","INT2_s04","INT2_s07","INT2_s08","INT2_s10","INT2_s14","INT2_s16","INT2_s19"))
> levels(data.long$participant)
 [1] "INT2_s01" "INT2_s03" "INT2_s05" "INT2_s06" "INT2_s11" "INT2_s12"
 [7] "INT2_s15" "INT2_s04" "INT2_s07" "INT2_s08" "INT2_s10" "INT2_s14"
[13] "INT2_s16" "INT2_s19"
> 
> 
> # before plotting coord_flip'd LI plot, improve ordering for display in faceted flipped axes
> data.long$participant<-factor(data.long$participant,levels=rev(levels(data.long$participant)))
> data.long$group<-factor(data.long$group, levels=rev(levels(data.long$group)))
> data.long$roi<-factor(data.long$roi, levels=c("CROSSONlateralFrontalROI","CROSSONPerisylvian","CROSSONmedialFrontal"))
> 
> # per BC: subset by region for plots and stats:
> data.long.lateralFrontal<-subset(data.long,roi == "CROSSONlateralFrontalROI")
> data.long.perisylvian<-subset(data.long,roi == "CROSSONPerisylvian")
> data.long.medialFrontal<-subset(data.long,roi == "CROSSONmedialFrontal")
> 
> # calcualte means and standard deviations:
> LI.mean.all<-mean(data.long$LI, na.rm=TRUE)
> LI.mean.lateralFrontal<-mean(data.long.lateralFrontal$LI, na.rm=TRUE)
> #LI.mean.lateralFrontal.control<-
> #LI.mean.lateralFrontal.intention<-
> LI.mean.perisylvian<-mean(data.long.perisylvian$LI, na.rm=TRUE)
> #LI.mean.perisylvian.control<-
> #LI.mean.perisylvian.intention<-
> LI.mean.medialFrontal<-mean(data.long.medialFrontal$LI, na.rm=TRUE)
> #LI.mean.medialFrontal.control<-
> #LI.mean.medialFrontal.intention<-
> 
> LI.sd.all<-sd(data.long$LI, na.rm=TRUE)
> LI.sd.lateralFrontal<-sd(data.long.lateralFrontal$LI, na.rm=TRUE)
> #LI.sd.lateralFrontal.control<-
> #LI.sd.lateralFrontal.intention<-
> LI.sd.perisylvian<-sd(data.long.perisylvian$LI, na.rm=TRUE)
> #LI.sd.perisylvian.control<-
> #LI.sd.perisylvian.intention<-
> LI.sd.medialFrontal<-sd(data.long.medialFrontal$LI, na.rm=TRUE)
> #LI.sd.medialFrontal.control<-
> #LI.sd.medialFrontal.intention<-
> 
> # TBD: calculate max for LI axis by greater than max LI or mean+-SD
> 
> #########################################################################################################################
> # (For color options, display brewer pallettes: RColorBrewer::display.brewer.all)
> #
> # Now create LI bar plot with x and y axes flipped. Notice negative dodging to get pre/post/3mo order correct:
> # ....+ scale_y_reverse also works to put negatives LIs on right, but ylim also allows control of range:
> #
> # First plot all three ROIs on one plot:
> # ...start with basic mapping:
> p.laterality<-ggplot(data.long, aes(participant, LI, fill=session)) +
+ 	# ...add the elements that should appear in the background (line for mean and shading for SD):
+ 	# (weirdly (b/c of axis flip?), min and max have to be given as -1*VARIABLE here:)
+ 	geom_hline(yintercept=LI.mean.all, linetype="dashed") + 
+ 	geom_rect(ymin=-LI.mean.all+LI.sd.all, ymax=-LI.mean.all-LI.sd.all, xmin=0, xmax=Inf, fill="purple", alpha=0.02) +
+ 	geom_hline(yintercept=0) +
+ 	# ...and now add the foreground barplot and everything else:
+ 	geom_bar(stat="identity", position=position_dodge(width=-.75)) + 
+ 	coord_flip() + 
+ 	facet_grid(roi ~ group, space="free") + 
+ 	ylim(2,-2) + 
+ 	scale_fill_brewer(palette="YlOrRd") + 
+ 	theme_bw() + ylab("Laterality Index") + 
+ 	opts(title=paste("Pre, Post, and Follow-Up Laterality Indicies for \nThree Anatomical Regions\n(grand mean LI=", round(LI.mean.all, digits=2), ", sd=" ,round(LI.sd.all, digits=2),")" ))
> # ...display
> p.laterality
> 
> # and now similar plots for individual ROI LIs:
> 
> p.laterality.lateralFrontal<-ggplot(data.long.lateralFrontal, aes(participant, LI, fill=session)) +
+ 	geom_hline(yintercept=LI.mean.lateralFrontal, linetype="dashed") + 
+ 	geom_rect(ymin=-LI.mean.lateralFrontal+LI.sd.lateralFrontal, ymax=-LI.mean.lateralFrontal-LI.sd.lateralFrontal, xmin=0, xmax=Inf, fill="purple", alpha=0.02) +
+ 	geom_hline(yintercept=0) +
+ 	geom_bar(stat="identity", position=position_dodge(width=-.75)) + 
+ 	coord_flip() + 
+ 	facet_grid(roi ~ group, space="free") + 
+ 	ylim(2,-2) + 
+ 	scale_fill_brewer(palette="YlOrRd") + 
+ 	theme_bw() + ylab("Laterality Index") + 
+ 	opts(title=paste("Pre, Post, and Follow-Up Laterality Indicies for \nLateral Frontal Region\n(mean LI=", round(LI.mean.lateralFrontal, digits=2), ", sd=" ,round(LI.sd.lateralFrontal, digits=2),")"))
> # ...display:
> #p.laterality.lateralFrontal
> 
> p.laterality.perisylvian<-ggplot(data.long.perisylvian, aes(participant, LI, fill=session)) +
+ 	geom_hline(yintercept=LI.mean.perisylvian, linetype="dashed") + 
+ 	geom_rect(ymin=-LI.mean.perisylvian+LI.sd.perisylvian, ymax=-LI.mean.perisylvian-LI.sd.perisylvian, xmin=0, xmax=Inf, fill="purple", alpha=0.02) +
+ 	geom_hline(yintercept=0) +
+ 	geom_bar(stat="identity", position=position_dodge(width=-.75)) + 
+ 	coord_flip() + 
+ 	facet_grid(roi ~ group, space="free") + 
+ 	ylim(2,-2) + 
+ 	scale_fill_brewer(palette="YlOrRd") + 
+ 	theme_bw() + ylab("Laterality Index") + 
+ 	opts(title=paste("Pre, Post, and Follow-Up Laterality Indicies for \nPerisylvian Region\n(mean LI=", round(LI.mean.perisylvian, digits=2), ", sd=" ,round(LI.sd.perisylvian, digits=2),")" ))
> # ...display:
> #p.laterality.perisylvian
> 
> p.laterality.medialFrontal<-ggplot(data.long.medialFrontal, aes(participant, LI, fill=session)) +
+ 	geom_hline(yintercept=LI.mean.medialFrontal, linetype="dashed") + 
+ 	geom_rect(ymin=-LI.mean.medialFrontal+LI.sd.medialFrontal, ymax=-LI.mean.medialFrontal-LI.sd.medialFrontal, xmin=0, xmax=Inf, fill="purple", alpha=0.02) +
+ 	geom_hline(yintercept=0) +
+ 	geom_bar(stat="identity", position=position_dodge(width=-.75)) + 
+ 	coord_flip() + 
+ 	facet_grid(roi ~ group, space="free") + 
+ 	ylim(2,-2) + 
+ 	scale_fill_brewer(palette="YlOrRd") + 
+ 	theme_bw() + ylab("Laterality Index") + 
+ 	opts(title=paste("Pre, Post, and Follow-Up Laterality Indicies for \nMedial Frontal Region\n(mean LI =", round(LI.mean.medialFrontal, digits=2), ", sd=" ,round(LI.sd.medialFrontal, digits=2),")" ))
> # ...display:
> #p.laterality.medialFrontal
> 
> # TBD: also eventually try as a dotchart with geom_point + geom_segment
> 
> 
> #########################################################################################################################
> # now pivot and restructure data to wide format for calculation of LIchange1 and LIchange2
> data.wide <- dcast(data.long, participant + group + roi ~ session, value_var="LI")
> 
> str(data.wide)
'data.frame':	42 obs. of  6 variables:
 $ participant: Factor w/ 14 levels "INT2_s19","INT2_s16",..: 1 1 1 2 2 2 3 3 3 4 ...
 $ group      : Factor w/ 2 levels "intention","control": 2 2 2 2 2 2 2 2 2 2 ...
 $ roi        : Factor w/ 3 levels "CROSSONlateralFrontalROI",..: 1 2 3 1 2 3 1 2 3 1 ...
 $ pre        : num  1 -0.589 0.278 0.558 -0.195 ...
 $ post       : num  0.7453 -0.0278 -0.7609 0.1338 -0.1647 ...
 $ followup   : num  0.818 0.154 -0.717 0.293 0.353 ...
> summary(data.wide)
   participant       group                          roi          pre           
 INT2_s19: 3   intention:21   CROSSONlateralFrontalROI:14   Min.   :-1.000000  
 INT2_s16: 3   control  :21   CROSSONPerisylvian      :14   1st Qu.:-0.508868  
 INT2_s14: 3                  CROSSONmedialFrontal    :14   Median : 0.000000  
 INT2_s10: 3                                                Mean   : 0.001237  
 INT2_s08: 3                                                3rd Qu.: 0.401552  
 INT2_s07: 3                                                Max.   : 1.000000  
 (Other) :24                                                                   
      post             followup       
 Min.   :-1.00000   Min.   :-1.00000  
 1st Qu.:-0.73180   1st Qu.:-0.41289  
 Median :-0.17787   Median :-0.01362  
 Mean   :-0.22780   Mean   :-0.07865  
 3rd Qu.: 0.09314   3rd Qu.: 0.22153  
 Max.   : 0.99134   Max.   : 1.00000  
                                      
> 
> # calculate LIchange1 and LIchange2
> data.wide <- transform(data.wide, LIchange1.post=(post-pre))
> data.wide <- transform(data.wide, LIchange2.followup=(followup-pre))
> 
> # melt data for plotting and fix resulting variable names
> data.long.change<-melt(data.wide, id.vars=c("participant","group","roi"), measure.vars=c("LIchange1.post","LIchange2.followup"), variable.name=c("LIchange.signed"))
> head(data.long.change)
  participant   group                      roi       variable       value
1    INT2_s19 control CROSSONlateralFrontalROI LIchange1.post -0.25474757
2    INT2_s19 control       CROSSONPerisylvian LIchange1.post  0.56077722
3    INT2_s19 control     CROSSONmedialFrontal LIchange1.post -1.03866937
4    INT2_s16 control CROSSONlateralFrontalROI LIchange1.post -0.42390110
5    INT2_s16 control       CROSSONPerisylvian LIchange1.post  0.03045852
6    INT2_s16 control     CROSSONmedialFrontal LIchange1.post  0.44040952
> names(data.long.change)[names(data.long.change)=="variable"]<-"LIchange.period"
> names(data.long.change)[names(data.long.change)=="value"]<-"LIchange.signed"
> summary(data.long.change)
   participant       group                          roi    
 INT2_s19: 6   intention:42   CROSSONlateralFrontalROI:28  
 INT2_s16: 6   control  :42   CROSSONPerisylvian      :28  
 INT2_s14: 6                  CROSSONmedialFrontal    :28  
 INT2_s10: 6                                               
 INT2_s08: 6                                               
 INT2_s07: 6                                               
 (Other) :48                                               
           LIchange.period LIchange.signed  
 LIchange1.post    :42     Min.   :-1.9949  
 LIchange2.followup:42     1st Qu.:-0.4530  
                           Median :-0.1401  
                           Mean   :-0.1545  
                           3rd Qu.: 0.1590  
                           Max.   : 1.3440  
                                            
> 
> # add cstat data
> data.long.change<-(join(data.long.change, data.cstat, by="participant"))
> # subset for plotting just post:
> data.long.change.post<-subset(data.long.change, LIchange.period == "LIchange1.post")
> # plot separately for naming and categories:
> p.corr.naming<-ggplot(data.long.change.post,aes(LIchange.signed, naming.cstat.Z.post)) + geom_point(shape=1,size=2) + geom_smooth(method=lm) + scale_x_reverse() + facet_grid(roi ~ group)
> p.corr.categories<-ggplot(data.long.change.post,aes(LIchange.signed, category.cstat.Z.post)) + geom_point(shape=1,size=2) + geom_smooth(method=lm) + scale_x_reverse() + facet_grid(roi ~ group)
> 
> 
> # subset for plots and stats by region per BC:
> data.long.change.lateralFrontal<-subset(data.long.change,roi == "CROSSONlateralFrontalROI")
> 	data.long.change.lateralFrontal.LIchange1.post<-subset(data.long.change.lateralFrontal, LIchange.period == "LIchange1.post")
> 		data.long.change.lateralFrontal.LIchange1.post.intention<-subset(data.long.change.lateralFrontal.LIchange1.post, group == "intention")
> 		data.long.change.lateralFrontal.LIchange1.post.control  <-subset(data.long.change.lateralFrontal.LIchange1.post, group == "control")
> 	data.long.change.lateralFrontal.LIchange2.followup<-subset(data.long.change.lateralFrontal, LIchange.period == "LIchange2.followup")
> 		data.long.change.lateralFrontal.LIchange2.followup.intention<-subset(data.long.change.lateralFrontal.LIchange2.followup, group == "intention")
> 		data.long.change.lateralFrontal.LIchange2.followup.control  <-subset(data.long.change.lateralFrontal.LIchange2.followup, group == "control")
> 
> data.long.change.perisylvian<-subset(data.long.change,roi == "CROSSONPerisylvian")
> 	data.long.change.perisylvian.LIchange1.post<-subset(data.long.change.perisylvian, LIchange.period == "LIchange1.post")
> 		data.long.change.perisylvian.LIchange1.post.intention<-subset(data.long.change.perisylvian.LIchange1.post, group == "intention")
> 		data.long.change.perisylvian.LIchange1.post.control  <-subset(data.long.change.perisylvian.LIchange1.post, group == "control")
> 	data.long.change.perisylvian.LIchange2.followup<-subset(data.long.change.perisylvian, LIchange.period == "LIchange2.followup")
> 		data.long.change.perisylvian.LIchange2.followup.intention<-subset(data.long.change.perisylvian.LIchange2.followup, group == "intention")
> 		data.long.change.perisylvian.LIchange2.followup.control  <-subset(data.long.change.perisylvian.LIchange2.followup, group == "control")
> 
> data.long.change.medialFrontal<-subset(data.long.change,roi == "CROSSONmedialFrontal")
> 	data.long.change.medialFrontal.LIchange1.post<-subset(data.long.change.medialFrontal, LIchange.period == "LIchange1.post")
> 		data.long.change.medialFrontal.LIchange1.post.intention<-subset(data.long.change.medialFrontal.LIchange1.post, group == "intention")
> 		data.long.change.medialFrontal.LIchange1.post.control  <-subset(data.long.change.medialFrontal.LIchange1.post, group == "control")
> 	data.long.change.medialFrontal.LIchange2.followup<-subset(data.long.change.medialFrontal, LIchange.period == "LIchange2.followup")
> 		data.long.change.medialFrontal.LIchange2.followup.intention<-subset(data.long.change.medialFrontal.LIchange2.followup, group == "intention")
> 		data.long.change.medialFrontal.LIchange2.followup.control  <-subset(data.long.change.medialFrontal.LIchange2.followup, group == "control")
> 
> #########################################################################################################################
> # calcualte means, standard deviations, and t-test:
> 
> LIchange.mean.all<-mean(data.long.change$LIchange.signed, na.rm=TRUE)
> LIchange.mean.lateralFrontal<-mean(data.long.change.lateralFrontal$LIchange.signed, na.rm=TRUE)
> #LIchange.mean.lateralFrontal.control<-
> #LIchange.mean.lateralFrontal.intention<-
> LIchange.mean.perisylvian<-mean(data.long.change.perisylvian$LIchange.signed, na.rm=TRUE)
> #LIchange.mean.perisylvian.control<-
> #LIchange.mean.perisylvian.intention<-
> LIchange.mean.medialFrontal<-mean(data.long.change.medialFrontal$LIchange.signed, na.rm=TRUE)
> #LIchange.mean.medialFrontal.control<-
> #LIchange.mean.medialFrontal.intention<-
> 
> LIchange.sd.all<-sd(data.long.change$LIchange.signed, na.rm=TRUE)
> LIchange.sd.lateralFrontal<-sd(data.long.change.lateralFrontal$LIchange.signed, na.rm=TRUE)
> #LIchange.sd.lateralFrontal.control<-
> #LIchange.sd.lateralFrontal.intention<-
> LIchange.sd.perisylvian<-sd(data.long.change.perisylvian$LIchange.signed, na.rm=TRUE)
> #LIchange.sd.perisylvian.control<-
> #LIchange.sd.perisylvian.intention<-
> LIchange.sd.medialFrontal<-sd(data.long.change.medialFrontal$LIchange.signed, na.rm=TRUE)
> #LIchange.sd.medialFrontal.control<-
> #LIchange.sd.medialFrontal.intention<-
> 
> # One-group two-tailed t-tests... 
> # ...for lateralFrontal
> c("H0: 0 = mean of LIchange for lateralFrontal pre-to-post intention participants :")
[1] "H0: 0 = mean of LIchange for lateralFrontal pre-to-post intention participants :"
> t.test(data.long.change.lateralFrontal.LIchange1.post.intention$LIchange.signed, mu=0, alternative="two.sided")

	One Sample t-test

data:  data.long.change.lateralFrontal.LIchange1.post.intention$LIchange.signed 
t = -2.6016, df = 6, p-value = 0.04058
alternative hypothesis: true mean is not equal to 0 
95 percent confidence interval:
 -0.54373822 -0.01665689 
sample estimates:
 mean of x 
-0.2801976 

> #with(data.long.change.lateralFrontal.LIchange1.post.intention, cor(LIchange.signed,category.cstat.Z.post,use="pairwise.complete.obs"))
> #with(data.long.change.lateralFrontal.LIchange1.post.intention, cor(LIchange.signed,naming.cstat.Z.post,use="pairwise.complete.obs"))
> cor.test(data.long.change.lateralFrontal.LIchange1.post.intention$LIchange.signed, data.long.change.lateralFrontal.LIchange1.post.intention$naming.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.lateralFrontal.LIchange1.post.intention$LIchange.signed and data.long.change.lateralFrontal.LIchange1.post.intention$naming.cstat.Z.post 
t = -1.1293, df = 4, p-value = 0.3219
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.9315348  0.5322643 
sample estimates:
       cor 
-0.4916898 

> cor.test(data.long.change.lateralFrontal.LIchange1.post.intention$LIchange.signed, data.long.change.lateralFrontal.LIchange1.post.intention$naming.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.lateralFrontal.LIchange1.post.intention$LIchange.signed and data.long.change.lateralFrontal.LIchange1.post.intention$naming.cstat.Z.post 
S = 56, p-value = 0.2417
alternative hypothesis: true rho is not equal to 0 
sample estimates:
 rho 
-0.6 

> cor.test(data.long.change.lateralFrontal.LIchange1.post.intention$LIchange.signed, data.long.change.lateralFrontal.LIchange1.post.intention$category.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.lateralFrontal.LIchange1.post.intention$LIchange.signed and data.long.change.lateralFrontal.LIchange1.post.intention$category.cstat.Z.post 
t = -1.1675, df = 5, p-value = 0.2957
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.9016319  0.4455134 
sample estimates:
       cor 
-0.4628194 

> cor.test(data.long.change.lateralFrontal.LIchange1.post.intention$LIchange.signed, data.long.change.lateralFrontal.LIchange1.post.intention$category.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.lateralFrontal.LIchange1.post.intention$LIchange.signed and data.long.change.lateralFrontal.LIchange1.post.intention$category.cstat.Z.post 
S = 88, p-value = 0.2
alternative hypothesis: true rho is not equal to 0 
sample estimates:
       rho 
-0.5714286 

> 
> 
> c("H0: 0 = mean of LIchange for lateralFrontal pre-to-post control participants :")
[1] "H0: 0 = mean of LIchange for lateralFrontal pre-to-post control participants :"
> t.test(data.long.change.lateralFrontal.LIchange1.post.control$LIchange.signed, mu=0, alternative="two.sided")

	One Sample t-test

data:  data.long.change.lateralFrontal.LIchange1.post.control$LIchange.signed 
t = -0.6618, df = 6, p-value = 0.5327
alternative hypothesis: true mean is not equal to 0 
95 percent confidence interval:
 -0.8605982  0.4942016 
sample estimates:
 mean of x 
-0.1831983 

> cor.test(data.long.change.lateralFrontal.LIchange1.post.control$LIchange.signed, data.long.change.lateralFrontal.LIchange1.post.control$naming.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.lateralFrontal.LIchange1.post.control$LIchange.signed and data.long.change.lateralFrontal.LIchange1.post.control$naming.cstat.Z.post 
t = -0.3455, df = 5, p-value = 0.7438
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.8123452  0.6783642 
sample estimates:
       cor 
-0.1527006 

> cor.test(data.long.change.lateralFrontal.LIchange1.post.control$LIchange.signed, data.long.change.lateralFrontal.LIchange1.post.control$naming.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.lateralFrontal.LIchange1.post.control$LIchange.signed and data.long.change.lateralFrontal.LIchange1.post.control$naming.cstat.Z.post 
S = 86, p-value = 0.2357
alternative hypothesis: true rho is not equal to 0 
sample estimates:
       rho 
-0.5357143 

> cor.test(data.long.change.lateralFrontal.LIchange1.post.control$LIchange.signed, data.long.change.lateralFrontal.LIchange1.post.control$category.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.lateralFrontal.LIchange1.post.control$LIchange.signed and data.long.change.lateralFrontal.LIchange1.post.control$category.cstat.Z.post 
t = -1.4612, df = 4, p-value = 0.2177
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.9477464  0.4251907 
sample estimates:
       cor 
-0.5899402 

> cor.test(data.long.change.lateralFrontal.LIchange1.post.control$LIchange.signed, data.long.change.lateralFrontal.LIchange1.post.control$category.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.lateralFrontal.LIchange1.post.control$LIchange.signed and data.long.change.lateralFrontal.LIchange1.post.control$category.cstat.Z.post 
S = 64, p-value = 0.05833
alternative hypothesis: true rho is not equal to 0 
sample estimates:
       rho 
-0.8285714 

> 
> 
> 
> c("H0: 0 = mean of LIchange for lateralFrontal pre-to-followup intention participants :")
[1] "H0: 0 = mean of LIchange for lateralFrontal pre-to-followup intention participants :"
> t.test(data.long.change.lateralFrontal.LIchange2.followup.intention$LIchange.signed, mu=0, alternative="two.sided")

	One Sample t-test

data:  data.long.change.lateralFrontal.LIchange2.followup.intention$LIchange.signed 
t = -2.5036, df = 6, p-value = 0.0463
alternative hypothesis: true mean is not equal to 0 
95 percent confidence interval:
 -0.658985572 -0.007548017 
sample estimates:
 mean of x 
-0.3332668 

> cor.test(data.long.change.lateralFrontal.LIchange2.followup.intention$LIchange.signed, data.long.change.lateralFrontal.LIchange2.followup.intention$naming.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.lateralFrontal.LIchange2.followup.intention$LIchange.signed and data.long.change.lateralFrontal.LIchange2.followup.intention$naming.cstat.Z.post 
t = -0.6428, df = 4, p-value = 0.5553
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.8952363  0.6726000 
sample estimates:
       cor 
-0.3059852 

> cor.test(data.long.change.lateralFrontal.LIchange2.followup.intention$LIchange.signed, data.long.change.lateralFrontal.LIchange2.followup.intention$naming.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.lateralFrontal.LIchange2.followup.intention$LIchange.signed and data.long.change.lateralFrontal.LIchange2.followup.intention$naming.cstat.Z.post 
S = 50, p-value = 0.4194
alternative hypothesis: true rho is not equal to 0 
sample estimates:
       rho 
-0.4285714 

> cor.test(data.long.change.lateralFrontal.LIchange2.followup.intention$LIchange.signed, data.long.change.lateralFrontal.LIchange2.followup.intention$category.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.lateralFrontal.LIchange2.followup.intention$LIchange.signed and data.long.change.lateralFrontal.LIchange2.followup.intention$category.cstat.Z.post 
t = -0.6404, df = 5, p-value = 0.5501
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.8517741  0.6027041 
sample estimates:
       cor 
-0.2753087 

> cor.test(data.long.change.lateralFrontal.LIchange2.followup.intention$LIchange.signed, data.long.change.lateralFrontal.LIchange2.followup.intention$category.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.lateralFrontal.LIchange2.followup.intention$LIchange.signed and data.long.change.lateralFrontal.LIchange2.followup.intention$category.cstat.Z.post 
S = 68, p-value = 0.6615
alternative hypothesis: true rho is not equal to 0 
sample estimates:
       rho 
-0.2142857 

> 
> 
> c("H0: 0 = mean of LIchange for lateralFrontal pre-to-followup control participants :")
[1] "H0: 0 = mean of LIchange for lateralFrontal pre-to-followup control participants :"
> t.test(data.long.change.lateralFrontal.LIchange2.followup.control$LIchange.signed, mu=0, alternative="two.sided")

	One Sample t-test

data:  data.long.change.lateralFrontal.LIchange2.followup.control$LIchange.signed 
t = 0.3978, df = 6, p-value = 0.7046
alternative hypothesis: true mean is not equal to 0 
95 percent confidence interval:
 -0.3869862  0.5372305 
sample estimates:
 mean of x 
0.07512215 

> cor.test(data.long.change.lateralFrontal.LIchange2.followup.control$LIchange.signed, data.long.change.lateralFrontal.LIchange2.followup.control$naming.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.lateralFrontal.LIchange2.followup.control$LIchange.signed and data.long.change.lateralFrontal.LIchange2.followup.control$naming.cstat.Z.post 
t = -0.3537, df = 5, p-value = 0.738
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.8135772  0.6763980 
sample estimates:
       cor 
-0.1562473 

> cor.test(data.long.change.lateralFrontal.LIchange2.followup.control$LIchange.signed, data.long.change.lateralFrontal.LIchange2.followup.control$naming.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.lateralFrontal.LIchange2.followup.control$LIchange.signed and data.long.change.lateralFrontal.LIchange2.followup.control$naming.cstat.Z.post 
S = 50, p-value = 0.8397
alternative hypothesis: true rho is not equal to 0 
sample estimates:
      rho 
0.1071429 

> cor.test(data.long.change.lateralFrontal.LIchange2.followup.control$LIchange.signed, data.long.change.lateralFrontal.LIchange2.followup.control$category.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.lateralFrontal.LIchange2.followup.control$LIchange.signed and data.long.change.lateralFrontal.LIchange2.followup.control$category.cstat.Z.post 
t = -0.969, df = 4, p-value = 0.3874
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.9214981  0.5812196 
sample estimates:
       cor 
-0.4360016 

> cor.test(data.long.change.lateralFrontal.LIchange2.followup.control$LIchange.signed, data.long.change.lateralFrontal.LIchange2.followup.control$category.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.lateralFrontal.LIchange2.followup.control$LIchange.signed and data.long.change.lateralFrontal.LIchange2.followup.control$category.cstat.Z.post 
S = 44, p-value = 0.6583
alternative hypothesis: true rho is not equal to 0 
sample estimates:
       rho 
-0.2571429 

> 
> # ...for perisylvian
> c("H0: 0 = mean of LIchange for perisylvian pre-to-post intention participants :")
[1] "H0: 0 = mean of LIchange for perisylvian pre-to-post intention participants :"
> t.test(data.long.change.perisylvian.LIchange1.post.intention$LIchange.signed, mu=0, alternative="two.sided")

	One Sample t-test

data:  data.long.change.perisylvian.LIchange1.post.intention$LIchange.signed 
t = -1.5223, df = 6, p-value = 0.1788
alternative hypothesis: true mean is not equal to 0 
95 percent confidence interval:
 -1.8487874  0.4306785 
sample estimates:
 mean of x 
-0.7090545 

> cor.test(data.long.change.perisylvian.LIchange1.post.intention$LIchange.signed, data.long.change.perisylvian.LIchange1.post.intention$naming.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.perisylvian.LIchange1.post.intention$LIchange.signed and data.long.change.perisylvian.LIchange1.post.intention$naming.cstat.Z.post 
t = -2.4589, df = 4, p-value = 0.06978
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.97407195  0.09660519 
sample estimates:
       cor 
-0.7757779 

> cor.test(data.long.change.perisylvian.LIchange1.post.intention$LIchange.signed, data.long.change.perisylvian.LIchange1.post.intention$naming.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.perisylvian.LIchange1.post.intention$LIchange.signed and data.long.change.perisylvian.LIchange1.post.intention$naming.cstat.Z.post 
S = 62, p-value = 0.1028
alternative hypothesis: true rho is not equal to 0 
sample estimates:
       rho 
-0.7714286 

> cor.test(data.long.change.perisylvian.LIchange1.post.intention$LIchange.signed, data.long.change.perisylvian.LIchange1.post.intention$category.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.perisylvian.LIchange1.post.intention$LIchange.signed and data.long.change.perisylvian.LIchange1.post.intention$category.cstat.Z.post 
t = -2.8848, df = 5, p-value = 0.0344
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.96754795 -0.09216363 
sample estimates:
       cor 
-0.7903667 

> cor.test(data.long.change.perisylvian.LIchange1.post.intention$LIchange.signed, data.long.change.perisylvian.LIchange1.post.intention$category.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.perisylvian.LIchange1.post.intention$LIchange.signed and data.long.change.perisylvian.LIchange1.post.intention$category.cstat.Z.post 
S = 98, p-value = 0.06627
alternative hypothesis: true rho is not equal to 0 
sample estimates:
  rho 
-0.75 

> 
> 
> c("H0: 0 = mean of LIchange for perisylvian pre-to-post control participants :")
[1] "H0: 0 = mean of LIchange for perisylvian pre-to-post control participants :"
> t.test(data.long.change.perisylvian.LIchange1.post.control$LIchange.signed, mu=0, alternative="two.sided")

	One Sample t-test

data:  data.long.change.perisylvian.LIchange1.post.control$LIchange.signed 
t = 0.4846, df = 6, p-value = 0.6451
alternative hypothesis: true mean is not equal to 0 
95 percent confidence interval:
 -0.3646329  0.5447289 
sample estimates:
 mean of x 
0.09004801 

> cor.test(data.long.change.perisylvian.LIchange1.post.control$LIchange.signed, data.long.change.perisylvian.LIchange1.post.control$naming.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.perisylvian.LIchange1.post.control$LIchange.signed and data.long.change.perisylvian.LIchange1.post.control$naming.cstat.Z.post 
t = 2.1736, df = 5, p-value = 0.08177
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.1179489  0.9509354 
sample estimates:
      cor 
0.6970202 

> cor.test(data.long.change.perisylvian.LIchange1.post.control$LIchange.signed, data.long.change.perisylvian.LIchange1.post.control$naming.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.perisylvian.LIchange1.post.control$LIchange.signed and data.long.change.perisylvian.LIchange1.post.control$naming.cstat.Z.post 
S = 38, p-value = 0.4976
alternative hypothesis: true rho is not equal to 0 
sample estimates:
      rho 
0.3214286 

> cor.test(data.long.change.perisylvian.LIchange1.post.control$LIchange.signed, data.long.change.perisylvian.LIchange1.post.control$category.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.perisylvian.LIchange1.post.control$LIchange.signed and data.long.change.perisylvian.LIchange1.post.control$category.cstat.Z.post 
t = 3.0703, df = 4, p-value = 0.03728
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 0.08232874 0.98181865 
sample estimates:
      cor 
0.8379055 

> cor.test(data.long.change.perisylvian.LIchange1.post.control$LIchange.signed, data.long.change.perisylvian.LIchange1.post.control$category.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.perisylvian.LIchange1.post.control$LIchange.signed and data.long.change.perisylvian.LIchange1.post.control$category.cstat.Z.post 
S = 10, p-value = 0.1361
alternative hypothesis: true rho is not equal to 0 
sample estimates:
      rho 
0.7142857 

> 
> 
> c("H0: 0 = mean of LIchange for perisylvian pre-to-followup intention participants :")
[1] "H0: 0 = mean of LIchange for perisylvian pre-to-followup intention participants :"
> t.test(data.long.change.perisylvian.LIchange2.followup.intention$LIchange.signed, mu=0, alternative="two.sided")

	One Sample t-test

data:  data.long.change.perisylvian.LIchange2.followup.intention$LIchange.signed 
t = -0.5448, df = 6, p-value = 0.6056
alternative hypothesis: true mean is not equal to 0 
95 percent confidence interval:
 -1.1136854  0.7081044 
sample estimates:
 mean of x 
-0.2027905 

> cor.test(data.long.change.perisylvian.LIchange2.followup.intention$LIchange.signed, data.long.change.perisylvian.LIchange2.followup.intention$naming.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.perisylvian.LIchange2.followup.intention$LIchange.signed and data.long.change.perisylvian.LIchange2.followup.intention$naming.cstat.Z.post 
t = -1.531, df = 4, p-value = 0.2005
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.9505136  0.4020536 
sample estimates:
       cor 
-0.6078407 

> cor.test(data.long.change.perisylvian.LIchange2.followup.intention$LIchange.signed, data.long.change.perisylvian.LIchange2.followup.intention$naming.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.perisylvian.LIchange2.followup.intention$LIchange.signed and data.long.change.perisylvian.LIchange2.followup.intention$naming.cstat.Z.post 
S = 56, p-value = 0.2417
alternative hypothesis: true rho is not equal to 0 
sample estimates:
 rho 
-0.6 

> cor.test(data.long.change.perisylvian.LIchange2.followup.intention$LIchange.signed, data.long.change.perisylvian.LIchange2.followup.intention$category.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.perisylvian.LIchange2.followup.intention$LIchange.signed and data.long.change.perisylvian.LIchange2.followup.intention$category.cstat.Z.post 
t = -1.951, df = 5, p-value = 0.1085
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.9434189  0.1893848 
sample estimates:
       cor 
-0.6574352 

> cor.test(data.long.change.perisylvian.LIchange2.followup.intention$LIchange.signed, data.long.change.perisylvian.LIchange2.followup.intention$category.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.perisylvian.LIchange2.followup.intention$LIchange.signed and data.long.change.perisylvian.LIchange2.followup.intention$category.cstat.Z.post 
S = 102, p-value = 0.03413
alternative hypothesis: true rho is not equal to 0 
sample estimates:
       rho 
-0.8214286 

> 
> c("H0: 0 = mean of LIchange for perisylvian pre-to-followup control participants :")
[1] "H0: 0 = mean of LIchange for perisylvian pre-to-followup control participants :"
> t.test(data.long.change.perisylvian.LIchange2.followup.control$LIchange.signed, mu=0, alternative="two.sided")

	One Sample t-test

data:  data.long.change.perisylvian.LIchange2.followup.control$LIchange.signed 
t = 0.9909, df = 6, p-value = 0.36
alternative hypothesis: true mean is not equal to 0 
95 percent confidence interval:
 -0.3530656  0.8336582 
sample estimates:
mean of x 
0.2402963 

> cor.test(data.long.change.perisylvian.LIchange2.followup.control$LIchange.signed, data.long.change.perisylvian.LIchange2.followup.control$naming.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.perisylvian.LIchange2.followup.control$LIchange.signed and data.long.change.perisylvian.LIchange2.followup.control$naming.cstat.Z.post 
t = 0.3679, df = 5, p-value = 0.728
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.6729845  0.8156849 
sample estimates:
      cor 
0.1623541 

> cor.test(data.long.change.perisylvian.LIchange2.followup.control$LIchange.signed, data.long.change.perisylvian.LIchange2.followup.control$naming.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.perisylvian.LIchange2.followup.control$LIchange.signed and data.long.change.perisylvian.LIchange2.followup.control$naming.cstat.Z.post 
S = 76, p-value = 0.4444
alternative hypothesis: true rho is not equal to 0 
sample estimates:
       rho 
-0.3571429 

> cor.test(data.long.change.perisylvian.LIchange2.followup.control$LIchange.signed, data.long.change.perisylvian.LIchange2.followup.control$category.cstat.Z.post, alternative="two.sided", method="spearman")

	Spearman's rank correlation rho

data:  data.long.change.perisylvian.LIchange2.followup.control$LIchange.signed and data.long.change.perisylvian.LIchange2.followup.control$category.cstat.Z.post 
S = 28, p-value = 0.7139
alternative hypothesis: true rho is not equal to 0 
sample estimates:
rho 
0.2 

> cor.test(data.long.change.perisylvian.LIchange2.followup.control$LIchange.signed, data.long.change.perisylvian.LIchange2.followup.control$category.cstat.Z.post, alternative="two.sided", method="pearson")

	Pearson's product-moment correlation

data:  data.long.change.perisylvian.LIchange2.followup.control$LIchange.signed and data.long.change.perisylvian.LIchange2.followup.control$category.cstat.Z.post 
t = -0.0365, df = 4, p-value = 0.9726
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.8177027  0.8052351 
sample estimates:
        cor 
-0.01825717 

> 
> # ...for medialFrontal
> #c("H0: 0 = mean of LIchange for medialFrontal pre-to-post intention participants :")
> #one.sample.test(variables=d(LIchange.signed), data=data.long.change.medialFrontal.LIchange1.post.intention, test=t.test, alternative="two.sided")
> #c("H0: 0 = mean of LIchange for medialFrontal pre-to-post control participants :")
> #one.sample.test(variables=d(LIchange.signed), data=data.long.change.medialFrontal.LIchange1.post.control, test=t.test, alternative="two.sided")
> #c("H0: 0 = mean of LIchange for medialFrontal pre-to-followup intention participants :")
> #one.sample.test(variables=d(LIchange.signed), data=data.long.change.medialFrontal.LIchange2.followup.intention, test=t.test, alternative="two.sided")
> #c("H0: 0 = mean of LIchange for medialFrontal pre-to-followup control participants :")
> #one.sample.test(variables=d(LIchange.signed), data=data.long.change.medialFrontal.LIchange2.followup.control, test=t.test, alternative="two.sided")
> 
> 
> #########################################################################################################################
> # (For color options, display brewer pallettes: RColorBrewer::display.brewer.all)
> #
> # Now create LIchange bar plot with x and y axes flipped. Notice negative dodging to get  order correct:
> # ....+ scale_y_reverse also works to put negatives LIchanges on right, but ylim also allows control of range:
> #
> # First plot all three ROIs on one plot:
> # ...start with basic mapping:
> 
> # new for poster (TBD: spruce up facet labels if possible)
> p.lateralityChange<-ggplot(data.long.change, aes(participant, LIchange.signed, fill=LIchange.period)) +
+ 	geom_bar(stat="identity") + 
+ 	coord_flip() + 
+ 	facet_grid(roi ~ LIchange.period, space="free") + 
+ 	ylim(2,-2) + 
+ 	theme_bw() + ylab("Signed Change in Laterality Index") + 
+ 	opts(title=paste("Change in Laterality Index for Three Anatomical Regions:\nPre-to-Post and Pre-to-3-Month-Follow-Up"))
> # ...display
> p.laterality
> 
> 
> # old, pre-poster lateralityChange plot for all regions:
> # p.lateralityChange<-ggplot(data.long.change, aes(participant, LIchange.signed, fill=LIchange.period)) +
> # 	# ...add the elements that should appear in the background (line for mean and shading for SD):
> # 	# (weirdly (b/c of axis flip?), min and max have to be given as -1*VARIABLE here:)
> # 	geom_hline(yintercept=LIchange.mean.all, linetype="dashed") + 
> # 	geom_rect(ymin=-LIchange.mean.all+LIchange.sd.all, ymax=-LIchange.mean.all-LIchange.sd.all, xmin=0, xmax=Inf, fill="purple", alpha=0.02) +
> # 	geom_hline(yintercept=0) +
> # 	# ...and now add the foreground barplot and everything else:
> # 	geom_bar(stat="identity", position=position_dodge(width=-.75)) + 
> # 	coord_flip() + 
> # 	facet_grid(roi ~ group, space="free") + 
> # 	ylim(2,-2) + 
> # 	scale_fill_brewer(palette="Blues") + 
> # 	theme_bw() + ylab("Signed Change in Laterality Index") + 
> # 	opts(title=paste("Change in Laterality Index for Three Anatomical Regions:\nPre-to-Post and Pre-to-Follow-Up \n(grand mean LIchange=", round(LIchange.mean.all, digits=2), ", sd=" ,round(LIchange.sd.all, digits=2),")" ))
> # # ...display
> # p.laterality
> 
> # and now similar plots for individual ROI LIchanges:
> 
> p.lateralityChange.lateralFrontal<-ggplot(data.long.change.lateralFrontal, aes(participant, LIchange.signed, fill=LIchange.period)) +
+ 	geom_hline(yintercept=LIchange.mean.lateralFrontal, linetype="dashed") + 
+ 	geom_rect(ymin=-LIchange.mean.lateralFrontal+LIchange.sd.lateralFrontal, ymax=-LIchange.mean.lateralFrontal-LIchange.sd.lateralFrontal, xmin=0, xmax=Inf, fill="purple", alpha=0.02) +
+ 	geom_hline(yintercept=0) +
+ 	geom_bar(stat="identity", position=position_dodge(width=-.75)) + 
+ 	coord_flip() + 
+ 	facet_grid(roi ~ group, space="free") + 
+ 	ylim(2,-2) + 
+ 	scale_fill_brewer(palette="Blues") + 
+ 	theme_bw() + ylab("Signed Change in Laterality Index") + 
+ 	opts(title=paste("Change in Laterality Index for Lateral Frontal Region: \nPre-to-Post and Pre-to-Follow-Up \n(mean LIchange=", round(LIchange.mean.lateralFrontal, digits=2), ", sd=" ,round(LIchange.sd.lateralFrontal, digits=2),")"))
> # ...display:
> #p.laterality.lateralFrontal
> 
> p.lateralityChange.perisylvian<-ggplot(data.long.change.perisylvian, aes(participant, LIchange.signed, fill=LIchange.period)) +
+ 	geom_hline(yintercept=LIchange.mean.perisylvian, linetype="dashed") + 
+ 	geom_rect(ymin=-LIchange.mean.perisylvian+LIchange.sd.perisylvian, ymax=-LIchange.mean.perisylvian-LIchange.sd.perisylvian, xmin=0, xmax=Inf, fill="purple", alpha=0.02) +
+ 	geom_hline(yintercept=0) +
+ 	geom_bar(stat="identity", position=position_dodge(width=-.75)) + 
+ 	coord_flip() + 
+ 	facet_grid(roi ~ group, space="free") + 
+ 	ylim(2,-2) + 
+ 	scale_fill_brewer(palette="Blues") + 
+ 	theme_bw() + ylab("Signed Change in Laterality Index") + 
+ 	opts(title=paste("Change in Laterality Index for Perisylvian Region: \nPre-to-Post and Pre-to-Follow-Up \n(mean LIchange=", round(LIchange.mean.perisylvian, digits=2), ", sd=" ,round(LIchange.sd.perisylvian, digits=2),")" ))
> # ...display:
> #p.laterality.perisylvian
> 
> p.lateralityChange.medialFrontal<-ggplot(data.long.change.medialFrontal, aes(participant, LIchange.signed, fill=LIchange.period)) +
+ 	geom_hline(yintercept=LIchange.mean.medialFrontal, linetype="dashed") + 
+ 	geom_rect(ymin=-LIchange.mean.medialFrontal+LIchange.sd.medialFrontal, ymax=-LIchange.mean.medialFrontal-LIchange.sd.medialFrontal, xmin=0, xmax=Inf, fill="purple", alpha=0.02) +
+ 	geom_hline(yintercept=0) +
+ 	geom_bar(stat="identity", position=position_dodge(width=-.75)) + 
+ 	coord_flip() + 
+ 	facet_grid(roi ~ group, space="free") + 
+ 	ylim(2,-2) + 
+ 	scale_fill_brewer(palette="Blues") + 
+ 	theme_bw() + ylab("Signed Change in Laterality Index") + 
+ 	opts(title=paste("Change in Laterality Index for Medial Frontal Region: \nPre-to-Post and Pre-to-Follow-Up\n(mean LIchange =", round(LIchange.mean.medialFrontal, digits=2), ", sd=" ,round(LIchange.sd.medialFrontal, digits=2),")" ))
> # ...display:
> #p.laterality.medialFrontal
> 
> # TBD: also eventually try as a dotchart with geom_point + geom_segment
> 
> 
> 
> #########################################################################################################################
> # OLD plots for change in LI
> # p.lateralityChange<-ggplot(data.long.change, aes(participant, LIchange.signed, fill=LIchange.period)) + geom_bar(stat="identity", position=position_dodge(width=-.75)) + coord_flip() + facet_grid(roi ~ group) + ylim(2,-2) + scale_fill_brewer(palette="Blues") + theme_bw() + ylab("Signed Change in Laterality Index") + opts(title="Change in Laterality Index for Three ROIs: \nPre-to-Post and Pre-to-Follow-Up")
> # 
> # p.lateralityChange.lateralFrontal<-ggplot(data.long.change.lateralFrontal, aes(participant, LIchange.signed, fill=LIchange.period)) + geom_bar(stat="identity", position=position_dodge(width=-.75)) + coord_flip() + facet_grid(roi ~ group) + ylim(2,-2) + scale_fill_brewer(palette="Blues") + theme_bw() + ylab("Signed Change in Laterality Index") + opts(title="Change in Laterality Index for Lateral Frontal Region: \nPre-to-Post and Pre-to-Follow-Up")
> # 
> # p.lateralityChange.perisylvian<-ggplot(data.long.change.perisylvian, aes(participant, LIchange.signed, fill=LIchange.period)) + geom_bar(stat="identity", position=position_dodge(width=-.75)) + coord_flip() + facet_grid(roi ~ group) + ylim(2,-2) + scale_fill_brewer(palette="Blues") + theme_bw() + ylab("Signed Change in Laterality Index") + opts(title="Change in Laterality Index for Perisylvian Region: \nPre-to-Post and Pre-to-Follow-Up")
> # 
> # p.lateralityChange.medialFrontal<-ggplot(data.long.change.medialFrontal, aes(participant, LIchange.signed, fill=LIchange.period)) + geom_bar(stat="identity", position=position_dodge(width=-.75)) + coord_flip() + facet_grid(roi ~ group) + ylim(2,-2) + scale_fill_brewer(palette="Blues") + theme_bw() + ylab("Signed Change in Laterality Index") + opts(title="Change in Laterality Index for Medial Frontal Region: \nPre-to-Post and Pre-to-Follow-Up")
> 
> 
> 
> #########################################################################################################################
> # print plots to multi-page PDF on letter paper in portrait orientation:
> pdf("/tmp/r01-plots.pdf", height=9, paper="letter")
> # poster figures first:
> print(p.lateralityChange)
Warning messages:
1: Stacking not well defined when ymin != 0 
2: Stacking not well defined when ymin != 0 
3: Stacking not well defined when ymin != 0 
4: Stacking not well defined when ymin != 0 
5: Stacking not well defined when ymin != 0 
6: Stacking not well defined when ymin != 0 
> print(p.corr.naming)
Warning messages:
1: Removed 1 rows containing missing values (stat_smooth). 
2: Removed 1 rows containing missing values (stat_smooth). 
3: Removed 1 rows containing missing values (stat_smooth). 
4: Removed 1 rows containing missing values (geom_point). 
5: Removed 1 rows containing missing values (geom_point). 
6: Removed 1 rows containing missing values (geom_point). 
> print(p.corr.categories)
Warning messages:
1: Removed 1 rows containing missing values (stat_smooth). 
2: Removed 1 rows containing missing values (stat_smooth). 
3: Removed 1 rows containing missing values (stat_smooth). 
4: Removed 1 rows containing missing values (geom_point). 
5: Removed 1 rows containing missing values (geom_point). 
6: Removed 1 rows containing missing values (geom_point). 
> # followed by everything else:
> print(p.laterality)
> print(p.laterality.lateralFrontal)
> print(p.laterality.perisylvian)
> print(p.laterality.medialFrontal)
> print(p.lateralityChange.lateralFrontal)
Warning messages:
1: In RColorBrewer::brewer.pal(n, .$pal_name()) :
  minimal value for n is 3, returning requested palette with 3 different levels

2: In RColorBrewer::brewer.pal(n, .$pal_name()) :
  minimal value for n is 3, returning requested palette with 3 different levels

3: In RColorBrewer::brewer.pal(n, .$pal_name()) :
  minimal value for n is 3, returning requested palette with 3 different levels

> print(p.lateralityChange.perisylvian)
Warning messages:
1: In RColorBrewer::brewer.pal(n, .$pal_name()) :
  minimal value for n is 3, returning requested palette with 3 different levels

2: In RColorBrewer::brewer.pal(n, .$pal_name()) :
  minimal value for n is 3, returning requested palette with 3 different levels

3: In RColorBrewer::brewer.pal(n, .$pal_name()) :
  minimal value for n is 3, returning requested palette with 3 different levels

> print(p.lateralityChange.medialFrontal)
Warning messages:
1: In RColorBrewer::brewer.pal(n, .$pal_name()) :
  minimal value for n is 3, returning requested palette with 3 different levels

2: In RColorBrewer::brewer.pal(n, .$pal_name()) :
  minimal value for n is 3, returning requested palette with 3 different levels

3: In RColorBrewer::brewer.pal(n, .$pal_name()) :
  minimal value for n is 3, returning requested palette with 3 different levels

> dev.off()
pdf 
  2 
> 
> # view pdf in evince or acroread:
> system("acroread /tmp/r01-plots.pdf &")
> 
> proc.time()
   user  system elapsed 
 30.389   0.085  30.786 

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",

(acroread:9365): Gtk-WARNING **: Unable to locate theme engine in module_path: "clearlooks",
